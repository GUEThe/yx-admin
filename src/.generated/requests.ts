/**
 * yxAPI
 *
 *
 * version v1
 *
 *
 * NOTE: This class is auto generated by the code generator.
 * Do not edit the class manually.
 */
import * as m from "./models";
import { encodeQuery } from "@/utils";
import { Log } from "@/logbox";
import { apiSendAsync, ApiRequestOptions } from "@/utils/apiRequest";

const protocol = "https";
export const apiHost = process.env.VUE_APP_API_HOST;
const basePath = "";
export const baseUrl = `${protocol}://${apiHost}`;
export const wssBaseUrl = `wss://${apiHost}${basePath}/ws`;

/*
    export interface m.DataResponse&lt;m.TokenObj&gt; extends m.RestfulData{
      data?: m.TokenObj;
    }
*/

/**
 * 登陆获取token测试
 * @param signinForm m.SigninForm
 */
export function Sigin(options: {
  signinForm: m.SigninForm;
}): Promise<m.DataResponse<m.TokenObj>> {
  const opts: ApiRequestOptions = {
    url: `/api/Auth`,
    method: "post",
    reqName: "Sigin"
  };

  opts.data = options.signinForm;
  return apiSendAsync<m.DataResponse<m.TokenObj>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 退出登录
 */
export function Logout(): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Auth/logout`,
    method: "post",
    reqName: "Logout"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.UserInfo&gt; extends m.RestfulData{
      data?: m.UserInfo;
    }
*/

/**
 * 获取用户信息
 */
export function GetUserInfo(): Promise<m.DataResponse<m.UserInfo>> {
  const opts: ApiRequestOptions = {
    url: `/api/Auth/user`,
    method: "get",
    reqName: "GetUserInfo"
  };

  return apiSendAsync<m.DataResponse<m.UserInfo>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Awards[]&gt; extends m.RestfulData{
      data?: m.Awards[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 根据学号获取获奖列表
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 * @param studentId string string 学号
 */
export function GetAwardsListByStid(options: {
  page?: number;
  pageSize?: number;
  studentId?: string;
}): Promise<m.PageResponse<m.Awards[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards/GetAwardsListByStid`,
    method: "get",
    reqName: "GetAwardsListByStid"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    studentId: options.studentId
  };

  return apiSendAsync<m.PageResponse<m.Awards[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Awards[]&gt; extends m.RestfulData{
      data?: m.Awards[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 根据学院获取获奖列表
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 * @param college string string 学院
 */
export function GetAwardsListByCollege(options: {
  page?: number;
  pageSize?: number;
  college?: string;
}): Promise<m.PageResponse<m.Awards[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards/GetAwardsListByCollege`,
    method: "get",
    reqName: "GetAwardsListByCollege"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    college: options.college
  };

  return apiSendAsync<m.PageResponse<m.Awards[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Awards&gt; extends m.RestfulData{
      data?: m.Awards;
    }
*/

/**
 * 获取获奖信息
 * @param id number integer
 */
export function GetAwardsItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Awards>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards/${options.id}`,
    method: "get",
    reqName: "GetAwardsItem"
  };

  return apiSendAsync<m.DataResponse<m.Awards>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除获奖信息项
 * @param id number integer
 */
export function DeleteAwards(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards/${options.id}`,
    method: "delete",
    reqName: "DeleteAwards"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改获奖信息项
 * @param model m.Awards
 */
export function PutAwards(options: {
  model?: m.Awards;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards`,
    method: "put",
    reqName: "PutAwards"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增获奖信息项
 * @param model m.Awards
 */
export function PostAwards(options: {
  model?: m.Awards;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Awards`,
    method: "post",
    reqName: "PostAwards"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Bed[]&gt; extends m.RestfulData{
      data?: m.Bed[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取床位列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetBedList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.Bed[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Bed`,
    method: "get",
    reqName: "GetBedList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.Bed[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改床位项
 * @param id number integer
 * @param model m.Bed
 */
export function PutBed(options: {
  id?: number;
  model?: m.Bed;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Bed`,
    method: "put",
    reqName: "PutBed"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增床位项
 * @param model m.Bed
 */
export function PostBed(options: {
  model?: m.Bed;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Bed`,
    method: "post",
    reqName: "PostBed"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Bed&gt; extends m.RestfulData{
      data?: m.Bed;
    }
*/

/**
 * 获取床位
 * @param id number integer
 */
export function GetBedItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Bed>> {
  const opts: ApiRequestOptions = {
    url: `/api/Bed/${options.id}`,
    method: "get",
    reqName: "GetBedItem"
  };

  return apiSendAsync<m.DataResponse<m.Bed>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除床位项
 * @param id number integer
 */
export function DeleteBed(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Bed/${options.id}`,
    method: "delete",
    reqName: "DeleteBed"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Campus[]&gt; extends m.RestfulData{
      data?: m.Campus[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取校区列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetCampusList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.Campus[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Campus`,
    method: "get",
    reqName: "GetCampusList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.Campus[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改校区项
 * @param id number integer
 * @param model m.Campus
 */
export function PutCampus(options: {
  id?: number;
  model?: m.Campus;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Campus`,
    method: "put",
    reqName: "PutCampus"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增校区项
 * @param model m.Campus
 */
export function PostCampus(options: {
  model?: m.Campus;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Campus`,
    method: "post",
    reqName: "PostCampus"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Campus&gt; extends m.RestfulData{
      data?: m.Campus;
    }
*/

/**
 * 获取校区
 * @param id number integer
 */
export function GetCampusItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Campus>> {
  const opts: ApiRequestOptions = {
    url: `/api/Campus/${options.id}`,
    method: "get",
    reqName: "GetCampusItem"
  };

  return apiSendAsync<m.DataResponse<m.Campus>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除校区项
 * @param id number integer
 */
export function DeleteCampus(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Campus/${options.id}`,
    method: "delete",
    reqName: "DeleteCampus"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.CETRate[]&gt; extends m.RestfulData{
      data?: m.CETRate[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 按学院\专业\班级统计CET通过率
 * @param grade number integer 年级（不为空）
 * @param college string string 学院（不为空）
 * @param major string string 专业（可为空，为空代表全学院）
 * @param classes string string 班级（可为空，为空代表全学院）
 * @param school string string 学校（不为空）
 * @param term string string 学期编号（不为空）
 * @param type number integer CET类型（不为空，3,4,6,8）
 */
export function CollegePassRate(options: {
  grade?: number;
  college?: string;
  major?: string;
  classes?: string;
  school?: string;
  term?: string;
  type?: number;
}): Promise<m.PageResponse<m.CETRate[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/CET/CollegePassRate`,
    method: "get",
    reqName: "CollegePassRate"
  };

  opts.params = {
    grade: options.grade,
    college: options.college,
    major: options.major,
    classes: options.classes,
    school: options.school,
    term: options.term,
    type: options.type
  };

  return apiSendAsync<m.PageResponse<m.CETRate[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.CET[]&gt; extends m.RestfulData{
      data?: m.CET[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 列表查询
 * @param stid string string 学号
 * @param name string string 姓名
 * @param term string string 学期
 * @param year number integer 年份
 * @param type number integer 考试类型
 * @param IdCardNo string string 身份证号
 * @param reportNo string string 成绩单编号
 * @param school string string 学校
 */
export function ListQuery(options: {
  stid?: string;
  name?: string;
  term?: string;
  year?: number;
  type?: number;
  IdCardNo?: string;
  reportNo?: string;
  school?: string;
}): Promise<m.PageResponse<m.CET[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/CET/ListQuery`,
    method: "get",
    reqName: "ListQuery"
  };

  opts.params = {
    stid: options.stid,
    name: options.name,
    term: options.term,
    year: options.year,
    type: options.type,
    IdCardNo: options.IdCardNo,
    reportNo: options.reportNo,
    school: options.school
  };

  return apiSendAsync<m.PageResponse<m.CET[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.CETRate[]&gt; extends m.RestfulData{
      data?: m.CETRate[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 按年级\专业统计CET通过率汇总
 * @param grade number integer 年级
 * @param college string string 学院（不为空）
 * @param major string string 专业
 * @param school string string 学校（不为空）
 * @param term string string 学期编号（不为空）
 * @param type number integer CET类型（不为空，3,4,6,8）
 */
export function PassRateGather(options: {
  grade?: number;
  college?: string;
  major?: string;
  school?: string;
  term?: string;
  type?: number;
}): Promise<m.PageResponse<m.CETRate[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/CET/PassRateGather`,
    method: "get",
    reqName: "PassRateGather"
  };

  opts.params = {
    grade: options.grade,
    college: options.college,
    major: options.major,
    school: options.school,
    term: options.term,
    type: options.type
  };

  return apiSendAsync<m.PageResponse<m.CETRate[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 批量删除CET成绩
 * @param id number[]
 */
export function DeleteCET(options: {
  id?: number[];
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/CET`,
    method: "delete",
    reqName: "DeleteCET"
  };

  opts.data = options.id;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.College[]&gt; extends m.RestfulData{
      data?: m.College[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学院列表
 */
export function GetCollegeList(): Promise<m.PageResponse<m.College[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/College`,
    method: "get",
    reqName: "GetCollegeList"
  };

  return apiSendAsync<m.PageResponse<m.College[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改学院项
 * @param id number integer
 * @param model m.College
 */
export function PutCollege(options: {
  id?: number;
  model?: m.College;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/College`,
    method: "put",
    reqName: "PutCollege"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增学院项
 * @param model m.College
 */
export function PostCollege(options: {
  model?: m.College;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/College`,
    method: "post",
    reqName: "PostCollege"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.College&gt; extends m.RestfulData{
      data?: m.College;
    }
*/

/**
 * 获取学院
 * @param id number integer
 */
export function GetCollegeItem(options: {
  id: number;
}): Promise<m.DataResponse<m.College>> {
  const opts: ApiRequestOptions = {
    url: `/api/College/${options.id}`,
    method: "get",
    reqName: "GetCollegeItem"
  };

  return apiSendAsync<m.DataResponse<m.College>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除学院项
 * @param id number integer
 */
export function DeleteCollege(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/College/${options.id}`,
    method: "delete",
    reqName: "DeleteCollege"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Course[]&gt; extends m.RestfulData{
      data?: m.Course[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取课程信息列表
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 * @param courseid string string 课程编号
 * @param courseno string string 开课编号
 * @param cname string string 课程名称
 * @param teacherName string string 教师名称
 * @param teacherno string string 教师号
 * @param grade string string 年级
 * @param term string string 学期
 * @param spno string string 专业编号
 * @param spname string string 专业名称
 * @param collegeno string string 学院编号
 * @param collegename string string 学院名称
 */
export function GetCourseList(options: {
  page?: number;
  pageSize?: number;
  courseid?: string;
  courseno?: string;
  cname?: string;
  teacherName?: string;
  teacherno?: string;
  grade?: string;
  term?: string;
  spno?: string;
  spname?: string;
  collegeno?: string;
  collegename?: string;
}): Promise<m.PageResponse<m.Course[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Course/GetCourseList`,
    method: "get",
    reqName: "GetCourseList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    courseid: options.courseid,
    courseno: options.courseno,
    cname: options.cname,
    teacherName: options.teacherName,
    teacherno: options.teacherno,
    grade: options.grade,
    term: options.term,
    spno: options.spno,
    spname: options.spname,
    collegeno: options.collegeno,
    collegename: options.collegename
  };

  return apiSendAsync<m.PageResponse<m.Course[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Course&gt; extends m.RestfulData{
      data?: m.Course;
    }
*/

/**
 * 获取课程
 * @param courseid string string 课程编号
 * @param courseno string string 开课编号
 */
export function GetCourse(options: {
  courseid?: string;
  courseno?: string;
}): Promise<m.DataResponse<m.Course>> {
  const opts: ApiRequestOptions = {
    url: `/api/Course/GetCourse`,
    method: "get",
    reqName: "GetCourse"
  };

  opts.params = {
    courseid: options.courseid,
    courseno: options.courseno
  };

  return apiSendAsync<m.DataResponse<m.Course>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 更新课程信息
 * @param value m.Course  课程对象
 */
export function PutCourse(options: {
  value?: m.Course;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Course`,
    method: "put",
    reqName: "PutCourse"
  };

  opts.data = options.value;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Course&gt; extends m.RestfulData{
      data?: m.Course;
    }
*/

/**
 * 新增单个课程
 * @param course m.Course
 */
export function PostCourse(options: {
  course?: m.Course;
}): Promise<m.DataResponse<m.Course>> {
  const opts: ApiRequestOptions = {
    url: `/api/Course`,
    method: "post",
    reqName: "PostCourse"
  };

  opts.data = options.course;
  return apiSendAsync<m.DataResponse<m.Course>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除某个课程
 * @param id number integer
 */
export function DeleteCourse(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Course/${options.id}`,
    method: "delete",
    reqName: "DeleteCourse"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Fee[]&gt; extends m.RestfulData{
      data?: m.Fee[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取费用列表
 * @param page number integer
 * @param pageSize number integer
 * @param keyword string string
 */
export function GetFeeList(options: {
  page?: number;
  pageSize?: number;
  keyword?: string;
}): Promise<m.PageResponse<m.Fee[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee`,
    method: "get",
    reqName: "GetFeeList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    keyword: options.keyword
  };

  return apiSendAsync<m.PageResponse<m.Fee[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改费用项
 * @param id number integer
 * @param model m.Fee
 */
export function PutFee(options: {
  id?: number;
  model?: m.Fee;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee`,
    method: "put",
    reqName: "PutFee"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增某类型费用项
 * @param model m.Fee
 */
export function PostFee(options: {
  model?: m.Fee;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee`,
    method: "post",
    reqName: "PostFee"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Fee[]&gt; extends m.RestfulData{
      data?: m.Fee[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 根据学生类型获取费用列表
 * @param studentType string string 学生类型（本科生，研究生，在信息类别里定义）
 */
export function GetStudentFeeList(options: {
  studentType?: string;
}): Promise<m.PageResponse<m.Fee[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee/student`,
    method: "get",
    reqName: "GetStudentFeeList"
  };

  opts.params = {
    studentType: options.studentType
  };

  return apiSendAsync<m.PageResponse<m.Fee[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Fee&gt; extends m.RestfulData{
      data?: m.Fee;
    }
*/

/**
 * 获取某类型费用列表
 * @param id number integer
 */
export function GetFeeItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Fee>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee/${options.id}`,
    method: "get",
    reqName: "GetFeeItem"
  };

  return apiSendAsync<m.DataResponse<m.Fee>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除费用项
 * @param id number integer
 */
export function DeleteFee(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Fee/${options.id}`,
    method: "delete",
    reqName: "DeleteFee"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 下载文件
 * @param fileKey number integer
 */
export function GetFile(options: {
  fileKey: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/File/${options.fileKey}`,
    method: "get",
    reqName: "GetFile"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.FailStatisc[]&gt; extends m.RestfulData{
      data?: m.FailStatisc[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 挂科情况统计，不包括重修
 * @param grade string string 年级（不为空）
 * @param bj string string 班级
 * @param major string string 专业
 * @param term string string 学期编号（不为空）
 * @param orderType number integer 结果排序：1按科目，2按学分
 */
export function GetGlmcFailList(options: {
  grade?: string;
  bj?: string;
  major?: string;
  term?: string;
  orderType?: number;
}): Promise<m.PageResponse<m.FailStatisc[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Glmc/GetGlmcFailList`,
    method: "get",
    reqName: "GetGlmcFailList"
  };

  opts.params = {
    grade: options.grade,
    bj: options.bj,
    major: options.major,
    term: options.term,
    orderType: options.orderType
  };

  return apiSendAsync<m.PageResponse<m.FailStatisc[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.FailStatisc[]&gt; extends m.RestfulData{
      data?: m.FailStatisc[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 挂科情况统计
 * @param bj string string 班级
 * @param orderType number integer 结果排序：1按科目，2按学分
 */
export function GetGlmcFailStatisc(options: {
  bj?: string;
  orderType?: number;
}): Promise<m.PageResponse<m.FailStatisc[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Glmc/GetGlmcFailStatisc`,
    method: "get",
    reqName: "GetGlmcFailStatisc"
  };

  opts.params = {
    bj: options.bj,
    orderType: options.orderType
  };

  return apiSendAsync<m.PageResponse<m.FailStatisc[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.scoreStatic[]&gt; extends m.RestfulData{
      data?: m.scoreStatic[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 必修课平均分统计
 * @param grade string string 年级
 * @param bj string string 班级
 * @param min number integer 单科最低线
 * @param orderType number integer 结果排序：1按科目，2按学分
 */
export function GetGlmcAvergeStatisc(options: {
  grade?: string;
  bj?: string;
  min?: number;
  orderType?: number;
}): Promise<m.PageResponse<m.scoreStatic[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Glmc/GetGlmcAvergeStatisc`,
    method: "get",
    reqName: "GetGlmcAvergeStatisc"
  };

  opts.params = {
    grade: options.grade,
    bj: options.bj,
    min: options.min,
    orderType: options.orderType
  };

  return apiSendAsync<m.PageResponse<m.scoreStatic[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 更新成绩类型
 */
export function UpdateGlmcScoreType(): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Glmc/UpdateGlmcScoreType`,
    method: "get",
    reqName: "UpdateGlmcScoreType"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.GreenChannel[]&gt; extends m.RestfulData{
      data?: m.GreenChannel[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取绿色通道列表
 * @param page number integer
 * @param pageSize number integer
 * @param studentId number integer
 */
export function GetGreenChannelList(options: {
  page?: number;
  pageSize?: number;
  studentId?: number;
}): Promise<m.PageResponse<m.GreenChannel[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel`,
    method: "get",
    reqName: "GetGreenChannelList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    studentId: options.studentId
  };

  return apiSendAsync<m.PageResponse<m.GreenChannel[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改绿色通道项
 * @param id number integer
 * @param model m.GreenChannel
 */
export function PutGreenChannel(options: {
  id?: number;
  model?: m.GreenChannel;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel`,
    method: "put",
    reqName: "PutGreenChannel"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增绿色通道项
 * @param model m.GreenChannel
 */
export function PostGreenChannel(options: {
  model?: m.GreenChannel;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel`,
    method: "post",
    reqName: "PostGreenChannel"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.GreenChannel&gt; extends m.RestfulData{
      data?: m.GreenChannel;
    }
*/

/**
 * 获取绿色通道列表
 * @param id number integer
 */
export function GetGreenChannelItem(options: {
  id: number;
}): Promise<m.DataResponse<m.GreenChannel>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel/${options.id}`,
    method: "get",
    reqName: "GetGreenChannelItem"
  };

  return apiSendAsync<m.DataResponse<m.GreenChannel>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除绿色通道项
 * @param id number integer
 */
export function DeleteGreenChannel(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel/${options.id}`,
    method: "delete",
    reqName: "DeleteGreenChannel"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.GreenChannel&gt; extends m.RestfulData{
      data?: m.GreenChannel;
    }
*/

/**
 * 根据学生ID获取绿色通道记录
 * @param studenId number integer
 */
export function GetGreenChannelByStudentId(options: {
  studenId?: number;
}): Promise<m.DataResponse<m.GreenChannel>> {
  const opts: ApiRequestOptions = {
    url: `/api/GreenChannel/student`,
    method: "get",
    reqName: "GetGreenChannelByStudentId"
  };

  opts.params = {
    studenId: options.studenId
  };

  return apiSendAsync<m.DataResponse<m.GreenChannel>>(opts);
}
/*
    export interface m.PageResponse&lt;m.InfoCategory[]&gt; extends m.RestfulData{
      data?: m.InfoCategory[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取信息类别列表
 * @param page number integer
 * @param pageSize number integer
 * @param keyword string string
 */
export function GetInfoCategoryList(options: {
  page?: number;
  pageSize?: number;
  keyword?: string;
}): Promise<m.PageResponse<m.InfoCategory[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory`,
    method: "get",
    reqName: "GetInfoCategoryList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    keyword: options.keyword
  };

  return apiSendAsync<m.PageResponse<m.InfoCategory[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改信息类别项
 * @param id number integer
 * @param model m.InfoCategory
 */
export function PutInfoCategory(options: {
  id?: number;
  model?: m.InfoCategory;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory`,
    method: "put",
    reqName: "PutInfoCategory"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增某类型信息类别项
 * @param model m.InfoCategory
 */
export function PostInfoCategory(options: {
  model?: m.InfoCategory;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory`,
    method: "post",
    reqName: "PostInfoCategory"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.InfoCategory[]&gt; extends m.RestfulData{
      data?: m.InfoCategory[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学期列表
 */
export function GetTerms(): Promise<m.PageResponse<m.InfoCategory[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/Terms`,
    method: "get",
    reqName: "GetTerms"
  };

  return apiSendAsync<m.PageResponse<m.InfoCategory[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.InfoCategory[]&gt; extends m.RestfulData{
      data?: m.InfoCategory[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取年级列表
 */
export function GetGrades(): Promise<m.PageResponse<m.InfoCategory[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/Grades`,
    method: "get",
    reqName: "GetGrades"
  };

  return apiSendAsync<m.PageResponse<m.InfoCategory[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.InfoCategory[]&gt; extends m.RestfulData{
      data?: m.InfoCategory[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取课程类型列表
 */
export function GetCourseType(): Promise<m.PageResponse<m.InfoCategory[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/CourseTypes`,
    method: "get",
    reqName: "GetCourseType"
  };

  return apiSendAsync<m.PageResponse<m.InfoCategory[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.InfoCategory[]&gt; extends m.RestfulData{
      data?: m.InfoCategory[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取某类型信息类别列表
 * @param type string string
 */
export function GetInfoCategoryByType(options: {
  type?: string;
}): Promise<m.PageResponse<m.InfoCategory[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/items`,
    method: "get",
    reqName: "GetInfoCategoryByType"
  };

  opts.params = {
    type: options.type
  };

  return apiSendAsync<m.PageResponse<m.InfoCategory[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.InfoCategory&gt; extends m.RestfulData{
      data?: m.InfoCategory;
    }
*/

/**
 * 获取信息类别
 * @param id number integer
 */
export function GetInfoCategoryItem(options: {
  id: number;
}): Promise<m.DataResponse<m.InfoCategory>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/${options.id}`,
    method: "get",
    reqName: "GetInfoCategoryItem"
  };

  return apiSendAsync<m.DataResponse<m.InfoCategory>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除信息类别项
 * @param id number integer
 */
export function DeleteInfoCategory(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/InfoCategory/${options.id}`,
    method: "delete",
    reqName: "DeleteInfoCategory"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Leave[]&gt; extends m.RestfulData{
      data?: m.Leave[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取请假列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetLeaveList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.Leave[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Leave`,
    method: "get",
    reqName: "GetLeaveList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.Leave[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改请假项
 * @param id number integer
 * @param model m.Leave
 */
export function PutLeave(options: {
  id?: number;
  model?: m.Leave;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Leave`,
    method: "put",
    reqName: "PutLeave"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增请假项
 * @param model m.Leave
 */
export function PostLeave(options: {
  model?: m.Leave;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Leave`,
    method: "post",
    reqName: "PostLeave"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Leave&gt; extends m.RestfulData{
      data?: m.Leave;
    }
*/

/**
 * 获取请假
 * @param id number integer
 */
export function GetLeaveItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Leave>> {
  const opts: ApiRequestOptions = {
    url: `/api/Leave/${options.id}`,
    method: "get",
    reqName: "GetLeaveItem"
  };

  return apiSendAsync<m.DataResponse<m.Leave>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除请假项
 * @param id number integer
 */
export function DeleteLeave(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Leave/${options.id}`,
    method: "delete",
    reqName: "DeleteLeave"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Major[]&gt; extends m.RestfulData{
      data?: m.Major[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取专业列表
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 */
export function GetMajorList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.Major[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major`,
    method: "get",
    reqName: "GetMajorList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.Major[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改专业项
 * @param id number integer
 * @param model m.Major
 */
export function PutMajor(options: {
  id?: number;
  model?: m.Major;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major`,
    method: "put",
    reqName: "PutMajor"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增专业项
 * @param model m.Major
 */
export function PostMajor(options: {
  model?: m.Major;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major`,
    method: "post",
    reqName: "PostMajor"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Major&gt; extends m.RestfulData{
      data?: m.Major;
    }
*/

/**
 * 获取专业
 * @param id number integer
 */
export function GetMajorItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Major>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major/${options.id}`,
    method: "get",
    reqName: "GetMajorItem"
  };

  return apiSendAsync<m.DataResponse<m.Major>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除专业项
 * @param id number integer
 */
export function DeleteMajor(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major/${options.id}`,
    method: "delete",
    reqName: "DeleteMajor"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;undefined&gt; extends m.RestfulData{
      data?: ;
    }
*/

/**
 * 测试读取json
 */
export function test(): Promise<m.DataResponse<undefined>> {
  const opts: ApiRequestOptions = {
    url: `/api/Major/test`,
    method: "get",
    reqName: "test"
  };

  return apiSendAsync<m.DataResponse<undefined>>(opts);
}
/*
    export interface m.PageResponse&lt;m.News[]&gt; extends m.RestfulData{
      data?: m.News[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新闻列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetNewsList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.News[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/News`,
    method: "get",
    reqName: "GetNewsList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.News[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改新闻项
 * @param id number integer
 * @param model m.News
 */
export function PutNews(options: {
  id?: number;
  model?: m.News;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/News`,
    method: "put",
    reqName: "PutNews"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增新闻项
 * @param model m.News
 */
export function PostNews(options: {
  model?: m.News;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/News`,
    method: "post",
    reqName: "PostNews"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.News&gt; extends m.RestfulData{
      data?: m.News;
    }
*/

/**
 * 获取新闻
 * @param id number integer
 */
export function GetNewsItem(options: {
  id: number;
}): Promise<m.DataResponse<m.News>> {
  const opts: ApiRequestOptions = {
    url: `/api/News/${options.id}`,
    method: "get",
    reqName: "GetNewsItem"
  };

  return apiSendAsync<m.DataResponse<m.News>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除新闻项
 * @param id number integer
 */
export function DeleteNews(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/News/${options.id}`,
    method: "delete",
    reqName: "DeleteNews"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改操作日志
 * @param id number integer
 * @param model m.OperateLog
 */
export function PutOperateLog(options: {
  id?: number;
  model?: m.OperateLog;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/OperateLog`,
    method: "put",
    reqName: "PutOperateLog"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增操作日志
 * @param model m.OperateLog
 */
export function PostOperateLog(options: {
  model?: m.OperateLog;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/OperateLog`,
    method: "post",
    reqName: "PostOperateLog"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除操作日志
 * @param id number integer
 */
export function DeleteOperateLog(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/OperateLog/${options.id}`,
    method: "delete",
    reqName: "DeleteOperateLog"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.OperateLog&gt; extends m.RestfulData{
      data?: m.OperateLog;
    }
*/

/**
 * 添加学生备注信息
 * @param xh string string 学号
 * @param mark string string 备注
 */
export function PostStudentMark(options: {
  xh?: string;
  mark?: string;
}): Promise<m.DataResponse<m.OperateLog>> {
  const opts: ApiRequestOptions = {
    url: `/api/OperateLog/Student`,
    method: "post",
    reqName: "PostStudentMark"
  };

  opts.params = {
    xh: options.xh,
    mark: options.mark
  };

  return apiSendAsync<m.DataResponse<m.OperateLog>>(opts);
}
/*
    export interface m.PageResponse&lt;m.OperateLog[]&gt; extends m.RestfulData{
      data?: m.OperateLog[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学生备注列表
 * @param stid string string 学号
 */
export function GetStudentMark(options: {
  stid: string;
}): Promise<m.PageResponse<m.OperateLog[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/OperateLog/${options.stid}`,
    method: "get",
    reqName: "GetStudentMark"
  };

  return apiSendAsync<m.PageResponse<m.OperateLog[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Payment[]&gt; extends m.RestfulData{
      data?: m.Payment[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取缴费列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetPaymentList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.Payment[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Payment`,
    method: "get",
    reqName: "GetPaymentList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.Payment[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 修改缴费项
 * @param id number integer
 * @param model m.Payment
 */
export function PutPayment(options: {
  id?: number;
  model?: m.Payment;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Payment`,
    method: "put",
    reqName: "PutPayment"
  };

  opts.params = {
    id: options.id
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 新增某类型缴费项
 * @param model m.Payment
 */
export function PostPayment(options: {
  model?: m.Payment;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Payment`,
    method: "post",
    reqName: "PostPayment"
  };

  opts.data = options.model;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Payment&gt; extends m.RestfulData{
      data?: m.Payment;
    }
*/

/**
 * 获取某类型缴费列表
 * @param id number integer
 */
export function GetPaymentItem(options: {
  id: number;
}): Promise<m.DataResponse<m.Payment>> {
  const opts: ApiRequestOptions = {
    url: `/api/Payment/${options.id}`,
    method: "get",
    reqName: "GetPaymentItem"
  };

  return apiSendAsync<m.DataResponse<m.Payment>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除缴费项
 * @param id number integer
 */
export function DeletePayment(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Payment/${options.id}`,
    method: "delete",
    reqName: "DeletePayment"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.StudentAchievement[]&gt; extends m.RestfulData{
      data?: m.StudentAchievement[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学生成绩列表
 * @param stid string string 学号
 */
export function GetStudentScore(options: {
  stid: string;
}): Promise<m.PageResponse<m.StudentAchievement[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/${options.stid}`,
    method: "get",
    reqName: "GetStudentScore"
  };

  return apiSendAsync<m.PageResponse<m.StudentAchievement[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 更新学生成绩，内网接口
 * @param xh string string 学号
 * @param term string string 学期，为空时取当前学期
 */
export function UpdateScore(options: {
  xh?: string;
  term?: string;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score`,
    method: "post",
    reqName: "UpdateScore"
  };

  opts.params = {
    xh: options.xh,
    term: options.term
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 根据开课编号更新课程成绩排名
 * @param cno string string 开课编号，7位数字
 */
export function UpdateCnoRank(options: {
  cno?: string;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/UpdateCnoRank`,
    method: "post",
    reqName: "UpdateCnoRank"
  };

  opts.params = {
    cno: options.cno
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.FailStatisc[]&gt; extends m.RestfulData{
      data?: m.FailStatisc[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 挂科情况统计
 * @param grade string string 年级（不为空）
 * @param college string string 学院（不为空）
 * @param major string string 专业
 * @param term string string 学期编号（不为空）
 */
export function GetFailList(options: {
  grade?: string;
  college?: string;
  major?: string;
  term?: string;
}): Promise<m.PageResponse<m.FailStatisc[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/GetFailList`,
    method: "get",
    reqName: "GetFailList"
  };

  opts.params = {
    grade: options.grade,
    college: options.college,
    major: options.major,
    term: options.term
  };

  return apiSendAsync<m.PageResponse<m.FailStatisc[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.RetakeStatisc[]&gt; extends m.RestfulData{
      data?: m.RetakeStatisc[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 重修情况统计
 * @param grade string string 年级（不为空）
 * @param college string string 学院（不为空）
 * @param major string string 专业
 */
export function GetRetakeList(options: {
  grade?: string;
  college?: string;
  major?: string;
}): Promise<m.PageResponse<m.RetakeStatisc[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/GetRetakeList`,
    method: "get",
    reqName: "GetRetakeList"
  };

  opts.params = {
    grade: options.grade,
    college: options.college,
    major: options.major
  };

  return apiSendAsync<m.PageResponse<m.RetakeStatisc[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.ScoreByCourse&gt; extends m.RestfulData{
      data?: m.ScoreByCourse;
    }
*/

/**
 * 根据课号查询成绩列表
 * @param courseno string string 开课编号（不为空）
 */
export function GetScoreByCno(options: {
  courseno?: string;
}): Promise<m.DataResponse<m.ScoreByCourse>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/GetScoreByCno`,
    method: "get",
    reqName: "GetScoreByCno"
  };

  opts.params = {
    courseno: options.courseno
  };

  return apiSendAsync<m.DataResponse<m.ScoreByCourse>>(opts);
}
/*
    export interface m.DataResponse&lt;m.ScoreFail&gt; extends m.RestfulData{
      data?: m.ScoreFail;
    }
*/

/**
 * 挂科榜单
 * @param spno string string 专业编号
 * @param college string string 学院
 * @param term string string 学期
 * @param grade string string 学年
 */
export function GetScoreFail(options: {
  spno?: string;
  college?: string;
  term?: string;
  grade?: string;
}): Promise<m.DataResponse<m.ScoreFail>> {
  const opts: ApiRequestOptions = {
    url: `/api/Score/GetScoreFail`,
    method: "get",
    reqName: "GetScoreFail"
  };

  opts.params = {
    spno: options.spno,
    college: options.college,
    term: options.term,
    grade: options.grade
  };

  return apiSendAsync<m.DataResponse<m.ScoreFail>>(opts);
}
/*
    export interface m.PageResponse&lt;m.StuInfo[]&gt; extends m.RestfulData{
      data?: m.StuInfo[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取在校学生信息列表
 * @param year number integer 年份
 * @param page number integer 当前页
 * @param bj string string 班级
 * @param pageSize number integer 页大小
 * @param stid string string 学号
 * @param name string string 姓名
 * @param college string string 学院
 * @param major string string 专业
 * @param type string string 在校状态
 * @param stustatus string string 学籍状态
 * @param counselor string string 辅导员
 */
export function GetStudentList(options: {
  year?: number;
  page?: number;
  bj?: string;
  pageSize?: number;
  stid?: string;
  name?: string;
  college?: string;
  major?: string;
  type?: string;
  stustatus?: string;
  counselor?: string;
}): Promise<m.PageResponse<m.StuInfo[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student`,
    method: "get",
    reqName: "GetStudentList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    year: options.year,
    page: options.page,
    bj: options.bj,
    pageSize: options.pageSize,
    stid: options.stid,
    name: options.name,
    college: options.college,
    major: options.major,
    type: options.type,
    stustatus: options.stustatus,
    counselor: options.counselor
  };

  return apiSendAsync<m.PageResponse<m.StuInfo[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Student&gt; extends m.RestfulData{
      data?: m.Student;
    }
*/

/**
 * 新增单个新生学生信息
 * @param student m.Student
 */
export function PostStudent(options: {
  student?: m.Student;
}): Promise<m.DataResponse<m.Student>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student`,
    method: "post",
    reqName: "PostStudent"
  };

  opts.data = options.student;
  return apiSendAsync<m.DataResponse<m.Student>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Student[]&gt; extends m.RestfulData{
      data?: m.Student[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取录取新生学生列表(role为admin获取全部，college获取本学院)
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 * @param collegeCode string string 学院代码(可选,role为college时无效)
 * @param majorCode string string 专业代码（可选，优先级高于学院代码，有collegeCode不起作用)
 */
export function GetFreshmanList(options: {
  page?: number;
  pageSize?: number;
  collegeCode?: string;
  majorCode?: string;
}): Promise<m.PageResponse<m.Student[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/Freshman`,
    method: "get",
    reqName: "GetFreshmanList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    collegeCode: options.collegeCode,
    majorCode: options.majorCode
  };

  return apiSendAsync<m.PageResponse<m.Student[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.StuInfo&gt; extends m.RestfulData{
      data?: m.StuInfo;
    }
*/

/**
 * 获取在校学生信息
 * @param studentId number integer 学号
 */
export function GetStudentInfo(options: {
  studentId?: number;
}): Promise<m.DataResponse<m.StuInfo>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/studentId`,
    method: "get",
    reqName: "GetStudentInfo"
  };

  opts.params = {
    studentId: options.studentId
  };

  return apiSendAsync<m.DataResponse<m.StuInfo>>(opts);
}
/*
    export interface m.DataResponse&lt;m.Student&gt; extends m.RestfulData{
      data?: m.Student;
    }
*/

/**
 * 获取新生学生信息（admin可以获得任意学生，student只能获取自己）
 * @param studentId number integer 学号
 */
export function GetStudent(options: {
  studentId?: number;
}): Promise<m.DataResponse<m.Student>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/FreshmanStu`,
    method: "get",
    reqName: "GetStudent"
  };

  opts.params = {
    studentId: options.studentId
  };

  return apiSendAsync<m.DataResponse<m.Student>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 更新学生信息
 * @param value m.Student  学生对象
 */
export function PutFreshmanStudent(options: {
  value?: m.Student;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/PutFreshmanStudent`,
    method: "put",
    reqName: "PutFreshmanStudent"
  };

  opts.data = options.value;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 更新在校学生信息
 * @param value m.StuInfo  学生对象
 */
export function PutStudent(options: {
  value?: m.StuInfo;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/PutStudent`,
    method: "put",
    reqName: "PutStudent"
  };

  opts.data = options.value;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 删除某个学生
 * @param id number integer
 */
export function DeleteStudent(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/${options.id}`,
    method: "delete",
    reqName: "DeleteStudent"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Statistics[]&gt; extends m.RestfulData{
      data?: m.Statistics[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学生衣服统计列表（1代表男生，0代表女生）
 */
export function GetClothData(): Promise<m.PageResponse<m.Statistics[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/Cloth`,
    method: "get",
    reqName: "GetClothData"
  };

  return apiSendAsync<m.PageResponse<m.Statistics[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Statistics[]&gt; extends m.RestfulData{
      data?: m.Statistics[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学生鞋子统计列表（1代表男生，0代表女生）
 */
export function GetShoseData(): Promise<m.PageResponse<m.Statistics[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/Shose`,
    method: "get",
    reqName: "GetShoseData"
  };

  return apiSendAsync<m.PageResponse<m.Statistics[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Statistics[]&gt; extends m.RestfulData{
      data?: m.Statistics[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取学生报到统计列表（1代表已报到，0代表未报到）
 */
export function GetComeData(): Promise<m.PageResponse<m.Statistics[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/Come`,
    method: "get",
    reqName: "GetComeData"
  };

  return apiSendAsync<m.PageResponse<m.Statistics[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Newstudent[]&gt; extends m.RestfulData{
      data?: m.Newstudent[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生条件查询表
 * @param page number integer 当前页
 * @param pageSize number integer 页大小
 * @param gender string string 性别
 * @param type string string 学生类型
 * @param bjclass string string 班级
 * @param college string string 学院
 * @param major string string 专业
 * @param year number integer 年份
 * @param nativeplace string string 生源地
 */
export function GetNewstudentquery(options: {
  page?: number;
  pageSize?: number;
  gender?: string;
  type?: string;
  bjclass?: string;
  college?: string;
  major?: string;
  year?: number;
  nativeplace?: string;
}): Promise<m.PageResponse<m.Newstudent[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewstudentquery`,
    method: "get",
    reqName: "GetNewstudentquery"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize,
    gender: options.gender,
    type: options.type,
    bjclass: options.bjclass,
    college: options.college,
    major: options.major,
    year: options.year,
    nativeplace: options.nativeplace
  };

  return apiSendAsync<m.PageResponse<m.Newstudent[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.Statistics[]&gt; extends m.RestfulData{
      data?: m.Statistics[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 新生的省份生源男女分布统计
 * @param college string string 学院(为空默认全校)
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function CountByProvince(options: {
  college?: string;
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.Statistics[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/CountByProvince`,
    method: "get",
    reqName: "CountByProvince"
  };

  opts.params = {
    college: options.college,
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.Statistics[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentNMWCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentNMWCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生生源男女人数
 * @param nativePlace string string 生源地（为空默认全国）
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewstudentSYMWCount(options: {
  nativePlace?: string;
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentNMWCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewstudentSYMWCount`,
    method: "get",
    reqName: "GetNewstudentSYMWCount"
  };

  opts.params = {
    nativePlace: options.nativePlace,
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentNMWCount[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentMWCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentMWCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生的学院男女人数
 * @param college string string 学院（为空默认全校）
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewstudentCollegeMWCount(options: {
  college?: string;
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentMWCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewstudentCollegeMWCount`,
    method: "get",
    reqName: "GetNewstudentCollegeMWCount"
  };

  opts.params = {
    college: options.college,
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentMWCount[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentNCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentNCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生类型的生源分布
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewStudentTypeBirthplace(options: {
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentNCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewStudentTypeBirthplace`,
    method: "get",
    reqName: "GetNewStudentTypeBirthplace"
  };

  opts.params = {
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentNCount[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentMWCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentMWCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生类型的男女人数
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewstudentTypeMWCount(options: {
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentMWCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewstudentTypeMWCount`,
    method: "get",
    reqName: "GetNewstudentTypeMWCount"
  };

  opts.params = {
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentMWCount[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentNCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentNCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生的专业生源分布统计
 * @param major string string 专业(不为空)
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewStudentMajorBirthplace(options: {
  major?: string;
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentNCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewStudentMajorBirthplace`,
    method: "get",
    reqName: "GetNewStudentMajorBirthplace"
  };

  opts.params = {
    major: options.major,
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentNCount[]>>(opts);
}
/*
    export interface m.PageResponse&lt;m.NewstudentMWCount[]&gt; extends m.RestfulData{
      data?: m.NewstudentMWCount[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取新生的专业男女人数
 * @param major string string 专业（不为空）
 * @param type string string 学生类型（为空默认本科生）
 * @param year number integer 年份（为空默认当年）
 */
export function GetNewstudentMajorMWCount(options: {
  major?: string;
  type?: string;
  year?: number;
}): Promise<m.PageResponse<m.NewstudentMWCount[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/GetNewstudentMajorMWCount`,
    method: "get",
    reqName: "GetNewstudentMajorMWCount"
  };

  opts.params = {
    major: options.major,
    type: options.type,
    year: options.year
  };

  return apiSendAsync<m.PageResponse<m.NewstudentMWCount[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 批量修改多个学生的辅导员
 * @param groupstid string[]
 * @param counselor string string
 */
export function UpdateCounselor(options: {
  groupstid?: string[];
  counselor?: string;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/UpdateCounselor`,
    method: "post",
    reqName: "UpdateCounselor"
  };

  opts.params = {
    counselor: options.counselor
  };

  opts.data = options.groupstid;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 * 批量修改学生学籍状态
 * @param groupstid string[]
 * @param stustatus string string
 */
export function UpdateStustatus(options: {
  groupstid?: string[];
  stustatus?: string;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/Student/UpdateStustatus`,
    method: "post",
    reqName: "UpdateStustatus"
  };

  opts.params = {
    stustatus: options.stustatus
  };

  opts.data = options.groupstid;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.PageResponse&lt;m.User[]&gt; extends m.RestfulData{
      data?: m.User[];
      total: number;
      page: number;
      pageSize: number;
    }
*/

/**
 * 获取用户列表
 * @param page number integer
 * @param pageSize number integer
 */
export function GetUserList(options: {
  page?: number;
  pageSize?: number;
}): Promise<m.PageResponse<m.User[]>> {
  const opts: ApiRequestOptions = {
    url: `/api/User`,
    method: "get",
    reqName: "GetUserList"
  };

  options.pageSize = options.pageSize;

  opts.params = {
    page: options.page,
    pageSize: options.pageSize
  };

  return apiSendAsync<m.PageResponse<m.User[]>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 *
 * @param value m.User
 */
export function PostUser(options: {
  value?: m.User;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/User`,
    method: "post",
    reqName: "PostUser"
  };

  opts.data = options.value;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.User&gt; extends m.RestfulData{
      data?: m.User;
    }
*/

/**
 *
 * @param id number integer
 */
export function GetUser(options: {
  id: number;
}): Promise<m.DataResponse<m.User>> {
  const opts: ApiRequestOptions = {
    url: `/api/User/${options.id}`,
    method: "get",
    reqName: "GetUser"
  };

  return apiSendAsync<m.DataResponse<m.User>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 *
 * @param value m.User
 * @param id string string
 */
export function PutUser(options: {
  value?: m.User;
  id: string;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/User/${options.id}`,
    method: "put",
    reqName: "PutUser"
  };

  opts.data = options.value;
  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
/*
    export interface m.DataResponse&lt;m.RestfulData&gt; extends m.RestfulData{
      data?: m.RestfulData;
    }
*/

/**
 *
 * @param id number integer
 */
export function DeleteUser(options: {
  id: number;
}): Promise<m.DataResponse<m.RestfulData>> {
  const opts: ApiRequestOptions = {
    url: `/api/User/${options.id}`,
    method: "delete",
    reqName: "DeleteUser"
  };

  return apiSendAsync<m.DataResponse<m.RestfulData>>(opts);
}
